name: Build, Package, and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Déclenchement sur un tag de type v1.0.0, v2.1.3, etc.

env:
  SOLUTION_PATH: EasySave_Project/EasySave_Project.sln
  DOTNET_VERSION: '8.0'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build project
        run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

      - name: Package build artifact
        run: |
          mkdir artifact
          cp -r $(find . -type d -name Release)/ artifact/
          zip -r build-artifact.zip artifact/*

  create_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Lire le contenu de release.md
      - name: Read release notes
        id: read_release_notes
        run: |
          RELEASE_BODY=$(cat release.md)
          echo "release_body<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Créer la release GitHub avec le body lu depuis release.md
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body: ${{ env.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}