name: Build and Quality Check

on: [push, pull_request]

env:
  SOLUTION_PATH: EasySave_Project/EasySave_Project.sln
  FOLDER_TEST_PATH:  EasySave_Project/EasySave_Project_Test
  DOTNET_VERSION: '8.0'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build project
        run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

  commit_message_validation:
    runs-on: ubuntu-latest
    name: Commit Message Validation
    steps:
      - uses: actions/checkout@v3

      - id: verify_commit_message
        uses: uptownaravi/verify-commit-message-action@v2
        with:
          regex: '^(hotfix|release|feature|main|develop)\[.+\] : .+'
  
  sonar:
    name: Sonar Cloud
    runs-on: windows-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Récupération complète pour une analyse plus précise

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"matisbouquin_EasySaveProject" /o:"matisbouquin" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build ${{ env.SOLUTION_PATH }} --configuration Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  coverage:
    runs-on: ubuntu-latest
    name: Coverage code
    needs: build  # Ce job se déclenche après le build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run tests with coverage
        working-directory: ${{ env.FOLDER_TEST_PATH }}
        run: dotnet test --collect:"XPlat Code Coverage" --verbosity normal

      - name: Install reportgenerator (local installation)
        working-directory: ${{ env.FOLDER_TEST_PATH }}
        run: dotnet tool install dotnet-reportgenerator-globaltool --tool-path .tools

      - name: Generate coverage report
        working-directory: ${{ env.FOLDER_TEST_PATH }}
        run: .tools/reportgenerator -reports:'TestResults/**/coverage.cobertura.xml' -targetdir:'coverage-report'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.FOLDER_TEST_PATH }}/TestResults/**/coverage.cobertura.xml
          flags: unittests
          name: coverage-report

